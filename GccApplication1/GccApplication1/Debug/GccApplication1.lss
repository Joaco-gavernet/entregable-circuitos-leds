
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f6  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  00001149  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fb  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	0b00001000
};

int main(void)
{
  DDRC = ~(1<<PORTC0) & ~(1<<PORTC1); // Configura como entrada
  96:	8c ef       	ldi	r24, 0xFC	; 252
  98:	87 b9       	out	0x07, r24	; 7
  DDRD = 0xFF; // Configura como salida
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a b9       	out	0x0a, r24	; 10

  unsigned char act = 0, i = 0; 
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  while(1){
    if (PINC & (1<<PINC0)) {
  a2:	30 9b       	sbis	0x06, 0	; 6
  a4:	16 c0       	rjmp	.+44     	; 0xd2 <main+0x3c>
		act++; 
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	98 0f       	add	r25, r24
		act %= 3; 
  aa:	8b ea       	ldi	r24, 0xAB	; 171
  ac:	98 9f       	mul	r25, r24
  ae:	81 2d       	mov	r24, r1
  b0:	11 24       	eor	r1, r1
  b2:	86 95       	lsr	r24
  b4:	28 2f       	mov	r18, r24
  b6:	22 0f       	add	r18, r18
  b8:	82 0f       	add	r24, r18
  ba:	98 1b       	sub	r25, r24
  bc:	89 2f       	mov	r24, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	31 ee       	ldi	r19, 0xE1	; 225
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	40 40       	sbci	r20, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x2e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x38>
  ce:	00 00       	nop
		i = 0; 
  d0:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(100); 
	}
    if (PINC & (1<<PINC1)) {
  d2:	31 9b       	sbis	0x06, 1	; 6
  d4:	14 c0       	rjmp	.+40     	; 0xfe <main+0x68>
      if (act & 1) PORTB |= 1<<PORTB3; 
  d6:	80 ff       	sbrs	r24, 0
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <main+0x4a>
  da:	25 b1       	in	r18, 0x05	; 5
  dc:	28 60       	ori	r18, 0x08	; 8
  de:	25 b9       	out	0x05, r18	; 5
      if (act & 2) PORTB |= 1<<PORTB4; 
  e0:	81 ff       	sbrs	r24, 1
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x54>
  e4:	25 b1       	in	r18, 0x05	; 5
  e6:	20 61       	ori	r18, 0x10	; 16
  e8:	25 b9       	out	0x05, r18	; 5
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	31 ee       	ldi	r19, 0xE1	; 225
  ee:	44 e0       	ldi	r20, 0x04	; 4
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	40 40       	sbci	r20, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x5a>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x64>
  fa:	00 00       	nop
  fc:	06 c0       	rjmp	.+12     	; 0x10a <main+0x74>
	  _delay_ms(100); 
    } else {
      PORTB &= ~(1<<3); 
  fe:	25 b1       	in	r18, 0x05	; 5
 100:	27 7f       	andi	r18, 0xF7	; 247
 102:	25 b9       	out	0x05, r18	; 5
      PORTB &= ~(1<<4); 
 104:	25 b1       	in	r18, 0x05	; 5
 106:	2f 7e       	andi	r18, 0xEF	; 239
 108:	25 b9       	out	0x05, r18	; 5
    } 

    if (act == 0) PORTD = one[i], ++i, i %= 2; 
 10a:	81 11       	cpse	r24, r1
 10c:	09 c0       	rjmp	.+18     	; 0x120 <main+0x8a>
 10e:	e9 2f       	mov	r30, r25
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	e0 5f       	subi	r30, 0xF0	; 240
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	20 81       	ld	r18, Z
 118:	2b b9       	out	0x0b, r18	; 11
 11a:	9f 5f       	subi	r25, 0xFF	; 255
 11c:	91 70       	andi	r25, 0x01	; 1
 11e:	15 c0       	rjmp	.+42     	; 0x14a <main+0xb4>
    else if (act == 1) PORTD = two[i], ++i, i %= 8; 
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	49 f4       	brne	.+18     	; 0x136 <main+0xa0>
 124:	e9 2f       	mov	r30, r25
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e8 5f       	subi	r30, 0xF8	; 248
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	20 81       	ld	r18, Z
 12e:	2b b9       	out	0x0b, r18	; 11
 130:	9f 5f       	subi	r25, 0xFF	; 255
 132:	97 70       	andi	r25, 0x07	; 7
 134:	0a c0       	rjmp	.+20     	; 0x14a <main+0xb4>
    else if (act == 2) PORTD = three[i], ++i, i %= 8; 
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	41 f4       	brne	.+16     	; 0x14a <main+0xb4>
 13a:	e9 2f       	mov	r30, r25
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	20 81       	ld	r18, Z
 144:	2b b9       	out	0x0b, r18	; 11
 146:	9f 5f       	subi	r25, 0xFF	; 255
 148:	97 70       	andi	r25, 0x07	; 7
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	31 ee       	ldi	r19, 0xE1	; 225
 14e:	44 e0       	ldi	r20, 0x04	; 4
 150:	21 50       	subi	r18, 0x01	; 1
 152:	30 40       	sbci	r19, 0x00	; 0
 154:	40 40       	sbci	r20, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0xba>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xc4>
 15a:	00 00       	nop
 15c:	a2 cf       	rjmp	.-188    	; 0xa2 <main+0xc>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
